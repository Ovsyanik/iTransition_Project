@inject IViewLocalizer Localizer
@{

    List<CustomFieldType> customFieldTypes = new List<CustomFieldType>();
    customFieldTypes.Add(CustomFieldType.Checkbox);
    customFieldTypes.Add(CustomFieldType.Text);
    customFieldTypes.Add(CustomFieldType.String);
    customFieldTypes.Add(CustomFieldType.Date);
    customFieldTypes.Add(CustomFieldType.Number);

    List<String> customFieldTypesString = new List<String>();
    customFieldTypesString.Add(CustomFieldType.Checkbox.ToString());
    customFieldTypesString.Add(CustomFieldType.Text.ToString());
    customFieldTypesString.Add(CustomFieldType.String.ToString());
    customFieldTypesString.Add(CustomFieldType.Date.ToString());
    customFieldTypesString.Add(CustomFieldType.Number.ToString());

    List<SelectListItem> selectListItems = new List<SelectListItem>();
    foreach (var type in customFieldTypes)
    {
        selectListItems.Add(new SelectListItem { Value = type.ToString(), Text = type.ToString() });
    }
    Collection collection = new Collection();
    if (Model != null)
    {
        collection = Model;
    }
}
<h2 class="text-center">Add collection</h2>

<form method="post" asp-controller="Home" asp-action="AddCollectionPost" enctype="multipart/form-data">
    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" name="name"
               value="@collection.Name" placeholder="Enter name">
    </div>

    <div class="form-group">
        <label for="theme">Theme</label>
        <select id="theme" name="theme" class="form-control selectpicker"
                data-style="btn-success" required>
            <option>@TypeItem.Books</option>
            <option>@TypeItem.NewPapers</option>
            <option>@TypeItem.Stamps</option>
        </select>
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <input type="text" class="form-control" id="description" value="@collection.Description"
               name="description" placeholder="Enter description">
    </div>

    <input type="file" name="files" id="files" />

    <div ondrop="callondrop(event);" ondragover="return false;" style=" height: 300px; width: 600px; background-color: skyblue;">
        <div id="placeholderImg" class="placeHolderMsg">
            <strong>Drag and Drop Files Here</strong>
        </div>
    </div>

    <div class="row">
        <div class="col-3">
            <input type="button" class="btn btn-primary" value="Добавить поле" onclick='newField(@Html.Raw(Json.Serialize(customFieldTypes)), @Html.Raw(Json.Serialize(customFieldTypesString)))' />
        </div>
        <div id="fields" class="col-9">
            @if (collection.Fields != null)
            {
                foreach (CustomField field in collection.Fields)
                {
                    <div class="form-group">
                        <input type="text" class="form-control" id="description" value="@field.Title"
                               name="field" placeholder="Enter Field">
                        <select asp-for="@field.CustomFieldType" asp-items='@selectListItems'
                                class="form-control selectpicker" data-style="btn-success"></select>
                    </div>
                }
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@section Scripts {
    <script>
        function callondrop(e) {
            e.preventDefault();
            if ((e.dataTransfer && e.dataTransfer.files) || (e.dataTransfer && e.dataTransfer.files)) {
                var files = e.target.files || e.dataTransfer.files;
                $('#files')[0].files = files;
            }
            return false;
        }

        function newField(customFieldTypes, customFieldTypesString) {
            let container = document.getElementById("fields");
            let fieldCount = container.getElementsByTagName("input").length;
            let nextFieldId = fieldCount + 1;
            let div = document.createElement("div");
            div.setAttribute("class", "form-group row");

            let field = document.createElement("input");
            field.setAttribute("class", "form-control");
            field.setAttribute("id", "Fields[" + nextFieldId + "]");
            field.setAttribute("name", "field");
            field.setAttribute("type", "text");

            let typeField = document.createElement("select");
            typeField.setAttribute("class", "form-control selectpicker");
            typeField.setAttribute("id", "FieldsType[" + nextFieldId + "]");
            typeField.setAttribute("name", "newFieldType");
            typeField.setAttribute("data-style", "btn-success");

            for (let i = 0; i < customFieldTypes.length; i++) {
                let typeFieldTypes = document.createElement("option");
                typeFieldTypes.setAttribute("value", customFieldTypes[i]);
                typeFieldTypes.innerHTML = customFieldTypesString[i];
                typeField.appendChild(typeFieldTypes);
            }

            div.appendChild(field);
            div.appendChild(typeField);

            container.appendChild(div);
        }
    </script>
}